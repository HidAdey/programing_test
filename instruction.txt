●●●question1.pl●●●
〇programの実行方法
perl question1.pl 引数1(監視ログのファイル名) 引数2(出力ファイル名(拡張子不要)) 引数3(N:連続タイムアウトの閾値)
例）perl question1.pl data1.txt resultdata


〇テストデータと結果
テストデータ：testdata1.txt
結果：resultdata1.txt
	月の変わり目などでも正常に動作するか試すために、うるう年の2/28から3/1を入れてテストしたところ、問題なく動作した。


〇内容
・概要
監視ログファイルを読み込み、故障状態のサーバアドレスとそのサーバの故障期間を出力する。

・詳細
まず、ファイルを読み込み、1行ずつ処理していく。
以下の4パターンに場合分けをして、故障の有無の識別、故障時間の算出を行う。
	1．今まで問題がなく、今回も正常な場合
	    特に処理は行わない。
	2．今まで故障はないが、今回故障した場合
	    pingを表す列の"-"にマッチさせる。サーバーと初めて応答がなかった時間を、ハッシュ（%failure）に保存する。
	    反応がなくなったことを、別のハッシュ（%fail_num）で管理する。
	3．タイムアウトが続いている場合
	    特に処理は行わない。
	4．復旧した場合
	    2で保存した応答が止まった時間と、反応が復活した時間から、関数を用いて故障時間を算出する。
	    故障時間の単位は秒で出力される。
また、上記だけではログファイルの最後まで反応がなかった場合、それが出力されない。
そのため、一通り処理が終わった後で、最後まで反応がなかったものを書き出す。
この時、故障期間については算出できないため、"failure"と出力する。


・用いた関数
1．time_from_str　(時刻の文字列を時刻情報のハッシュに変換する関数)
    ログファイルの日付をperlのモジュールであるTime::Localに渡すための型に変換する関数
2．time_to_sec　(Time::Localモジュールを使用して秒に変換)
    Time::Localモジュールのtimelocalを使用して、日付をエポック秒に変換



●●●question2.pl●●●
〇programの実行方法
perl question1.pl 引数1(監視ログのファイル名) 引数2(出力ファイル名(拡張子不要)) 引数3(N:連続タイムアウトの閾値)
例）perl question2.pl data.txt resultdata 3


〇テストデータと結果
テストデータ：testdata1.txt
結果：	resultdata2_n2.txt（実行コマンド：perl question2.pl testdata1.txt resultdata2_n2 2）
		resultdata2_n3.txt（実行コマンド：perl question2.pl testdata1.txt resultdata2_n3 3）


〇内容
・概要
N回以上連続してタイムアウトした場合にのみ故障とみなすように、question1.plを拡張した。

・question1.plから拡張した点
先述の4パターンに対し、以下の点を追加。
	3．タイムアウトが続いている場合
	    %fail_numを加算することで、タイムアウトの回数をカウントするように変更。
	4．復旧した場合
	    %fail_numでカウントした数がNの値より大きいときのみ、結果の計算と出力を行うように変更。
また、最後まで反応がなかったものの書き出しについても、カウント回数がNの値より大きいときのみ出力するように変更した。
↑N＝2の時は、サーバー10.20.30.2/16が出力されるが、N=3の時は出力されない（resultdata2_n2.txt, resultdata2_n3.txt参照）。



●●●question3.pl●●●
〇programの実行方法
perl question1.pl 引数1(監視ログのファイル名) 引数2(出力ファイル名(拡張子不要)) 引数3(N:連続タイムアウトの閾値) 引数4(m:応答時間の平均をとる数) 引数5(t:反応時間の上限)
例）perl question3.pl data.txt resultdata 3 3 50


〇テストデータと結果
テストデータ：testdata1.txt
結果：	resultdata3_3250_failure.txt, resultdata3_3250_overload.txt（実行コマンド：perl question3.pl testdata1.txt resultdata3_3250 3 2 50）
		resultdata3_23100_failure.txt, resultdata3_23100_overload.txt（実行コマンド：perl question3.pl testdata1.txt resultdata3_23100 2 3 100）


〇内容
・概要
各サーバの過負荷状態となっている期間を別ファイルに出力できるように、question2.plを拡張した。

・question2.plから拡張した点
出力ファイルを、2つにした。
引数2で与えた文字列の後ろに、“_failure.txt"をつけたファイル（故障したサーバーを書き出す）と、"_overload.txt"をつけたファイル（過負荷状態のサーバーを書き出す）を出力する。

先述の4パターンに対し、以下の点を追加。
	1．今までタイムアウトがなく、今回もタイムアウトがない場合
	    高負荷になっているかの判定を各種ハッシュを使って判定する。
	    入力されたログから、m+1回前のログからpingをハッシュに格納しておき、平均を取る。
	    平均値がtミリ秒を超えた場合、過負荷状態として扱い、高負荷でなくなるまで繰り返し、最終的に過負荷状態の時間を算出する。
	2．今まで故障はないが、今回タイムアウトした場合
	    それまで過負荷状態だった場合は、それを"***_overload.txt"に書き出す。
	4．復旧した場合
	    ログの情報を各種過負荷判定用のハッシュに格納する。
また、最後まで過負荷状態だったサーバーについても、、条件を満たす場合は"***_overload.txt"に出力する。
この時、過負荷時間は計算できないため、"overload"と出力する。



●●●question4.pl●●●
〇programの実行方法
perl question1.pl 引数1(監視ログのファイル名) 引数2(出力ファイル名(拡張子不要)) 引数3(N:連続タイムアウトの閾値)
例）perl question4.pl data.txt resultdata 3


〇テストデータと結果
テストデータ1：testdata4.txt
結果：	resultdata4_serverdown.txt, resultdata4_subnetdown.txt（実行コマンド：perl question4.pl testdata4.txt resultdata4 2）

テストデータ2：testdata4_2.txt (同一サブネットに属するサーバーが3つあるパターン)
結果：	resultdata4_2_serverdown.txt, resultdata4_2_subnetdown.txt（実行コマンド：perl question4.pl testdata4_2.txt resultdata4_2 3）


〇内容
・概要
各サブネット毎にネットワークの故障期間を出力できるようにquestion2.plを拡張した。

・question2.plから拡張した点
ログファイルを先頭から読み込み、あるサブネットに含まれるサーバーがタイムアウトした場合、ハッシュ（%sub_fail_num）を用いて1ずつカウントしていく（サブネット別でカウント）。
逆に同じサブネットに含まれるサーバーのうち、タイムアウトしないものがあった場合は、そのサブネットのカウントを0に戻す。
最終的に、カウントが「引数3で与えた値 × サブネット内のサーバー数」よりも大きくなった時、サブネットのスイッチの故障と判定する。
ただし、同一サブネット内のサーバーの監視ログは、すべて同じ間隔で取得されたものであることが前提である。

出力ファイルを、2つにした。
引数2で与えた文字列の後ろに、“_serverdown.txt"をつけたファイル（故障したサーバーを出力）と、"_subnetdown.txt"をつけたファイル（故障したサブネットを出力）を出力する。


先述の4パターンに対し、以下の点を追加。
	1．今までタイムアウトがなく、今回もタイムアウトがない場合
	    %sub_fail_numが1以上の時は、%sub_fail_numを削除する。
	2．今まで故障はないが、今回タイムアウトした場合
	    %sub_fail_numを+1してカウントする。
	3．タイムアウトが続いている場合
	    2同様。
	4．復旧した場合
		%sub_fail_numのカウントが「引数3で与えた値 × サブネット内のサーバー数」よりも大きくなった時、故障時間を計算し、出力する。
また、これまで同様、最後までタイムアウトしているサブネットについては、条件を満たす場合は"***_overload.txt"に出力する。
この時、過負荷時間は計算できないため、"subnet_failure!"と出力する。

